# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _i2psam
else:
    import _i2psam

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SAM_DEFAULT_ADDRESS = _i2psam.SAM_DEFAULT_ADDRESS
SAM_DEFAULT_PORT = _i2psam.SAM_DEFAULT_PORT
SAM_GENERATE_MY_DESTINATION = _i2psam.SAM_GENERATE_MY_DESTINATION
SAM_MY_NAME = _i2psam.SAM_MY_NAME
SAM_DEFAULT_I2P_OPTIONS = _i2psam.SAM_DEFAULT_I2P_OPTIONS
SAM_SIGNATURE_TYPE = _i2psam.SAM_SIGNATURE_TYPE
SAM_NAME_INBOUND_QUANTITY = _i2psam.SAM_NAME_INBOUND_QUANTITY
SAM_DEFAULT_INBOUND_QUANTITY = _i2psam.SAM_DEFAULT_INBOUND_QUANTITY
SAM_NAME_INBOUND_LENGTH = _i2psam.SAM_NAME_INBOUND_LENGTH
SAM_DEFAULT_INBOUND_LENGTH = _i2psam.SAM_DEFAULT_INBOUND_LENGTH
SAM_NAME_INBOUND_LENGTHVARIANCE = _i2psam.SAM_NAME_INBOUND_LENGTHVARIANCE
SAM_DEFAULT_INBOUND_LENGTHVARIANCE = _i2psam.SAM_DEFAULT_INBOUND_LENGTHVARIANCE
SAM_NAME_INBOUND_BACKUPQUANTITY = _i2psam.SAM_NAME_INBOUND_BACKUPQUANTITY
SAM_DEFAULT_INBOUND_BACKUPQUANTITY = _i2psam.SAM_DEFAULT_INBOUND_BACKUPQUANTITY
SAM_NAME_INBOUND_ALLOWZEROHOP = _i2psam.SAM_NAME_INBOUND_ALLOWZEROHOP
SAM_NAME_INBOUND_IPRESTRICTION = _i2psam.SAM_NAME_INBOUND_IPRESTRICTION
SAM_DEFAULT_INBOUND_IPRESTRICTION = _i2psam.SAM_DEFAULT_INBOUND_IPRESTRICTION
SAM_NAME_OUTBOUND_QUANTITY = _i2psam.SAM_NAME_OUTBOUND_QUANTITY
SAM_DEFAULT_OUTBOUND_QUANTITY = _i2psam.SAM_DEFAULT_OUTBOUND_QUANTITY
SAM_NAME_OUTBOUND_LENGTH = _i2psam.SAM_NAME_OUTBOUND_LENGTH
SAM_DEFAULT_OUTBOUND_LENGTH = _i2psam.SAM_DEFAULT_OUTBOUND_LENGTH
SAM_NAME_OUTBOUND_LENGTHVARIANCE = _i2psam.SAM_NAME_OUTBOUND_LENGTHVARIANCE
SAM_DEFAULT_OUTBOUND_LENGTHVARIANCE = _i2psam.SAM_DEFAULT_OUTBOUND_LENGTHVARIANCE
SAM_NAME_OUTBOUND_BACKUPQUANTITY = _i2psam.SAM_NAME_OUTBOUND_BACKUPQUANTITY
SAM_DEFAULT_OUTBOUND_BACKUPQUANTITY = _i2psam.SAM_DEFAULT_OUTBOUND_BACKUPQUANTITY
SAM_NAME_OUTBOUND_ALLOWZEROHOP = _i2psam.SAM_NAME_OUTBOUND_ALLOWZEROHOP
SAM_NAME_OUTBOUND_IPRESTRICTION = _i2psam.SAM_NAME_OUTBOUND_IPRESTRICTION
SAM_DEFAULT_OUTBOUND_IPRESTRICTION = _i2psam.SAM_DEFAULT_OUTBOUND_IPRESTRICTION
SAM_NAME_OUTBOUND_PRIORITY = _i2psam.SAM_NAME_OUTBOUND_PRIORITY
SOCKET_ERROR = _i2psam.SOCKET_ERROR
MAX_PATH = _i2psam.MAX_PATH
MSG_NOSIGNAL = _i2psam.MSG_NOSIGNAL
PRIO_MAX = _i2psam.PRIO_MAX
THREAD_PRIORITY_LOWEST = _i2psam.THREAD_PRIORITY_LOWEST
THREAD_PRIORITY_BELOW_NORMAL = _i2psam.THREAD_PRIORITY_BELOW_NORMAL
THREAD_PRIORITY_NORMAL = _i2psam.THREAD_PRIORITY_NORMAL
THREAD_PRIORITY_ABOVE_NORMAL = _i2psam.THREAD_PRIORITY_ABOVE_NORMAL

def strnlen_int(start, max_len):
    return _i2psam.strnlen_int(start, max_len)
class i2psam_stream_settings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    samhost = property(_i2psam.i2psam_stream_settings_samhost_get, _i2psam.i2psam_stream_settings_samhost_set)
    samport = property(_i2psam.i2psam_stream_settings_samport_get)
    nickname = property(_i2psam.i2psam_stream_settings_nickname_get, _i2psam.i2psam_stream_settings_nickname_set)
    i2cp_opts = property(_i2psam.i2psam_stream_settings_i2cp_opts_get, _i2psam.i2psam_stream_settings_i2cp_opts_set)
    destination = property(_i2psam.i2psam_stream_settings_destination_get, _i2psam.i2psam_stream_settings_destination_set)

    def __init__(self):
        _i2psam.i2psam_stream_settings_swiginit(self, _i2psam.new_i2psam_stream_settings())
    __swig_destroy__ = _i2psam.delete_i2psam_stream_settings

# Register i2psam_stream_settings in _i2psam:
_i2psam.i2psam_stream_settings_swigregister(i2psam_stream_settings)


def i2psam_stream_session_new(arg1):
    return _i2psam.i2psam_stream_session_new(arg1)

def i2psam_stream_session_free(arg1):
    return _i2psam.i2psam_stream_session_free(arg1)

def i2psam_get_samhost(arg1):
    return _i2psam.i2psam_get_samhost(arg1)

def i2psam_get_samport(arg1):
    return _i2psam.i2psam_get_samport(arg1)

def i2psam_get_nickname(arg1):
    return _i2psam.i2psam_get_nickname(arg1)

def i2psam_get_session_id(arg1):
    return _i2psam.i2psam_get_session_id(arg1)

def i2psam_get_sam_min_version(arg1):
    return _i2psam.i2psam_get_sam_min_version(arg1)

def i2psam_get_sam_max_version(arg1):
    return _i2psam.i2psam_get_sam_max_version(arg1)

def i2psam_get_sam_version(arg1):
    return _i2psam.i2psam_get_sam_version(arg1)

def i2psam_get_i2cp_options(arg1):
    return _i2psam.i2psam_get_i2cp_options(arg1)

def i2psam_is_sick(arg1):
    return _i2psam.i2psam_is_sick(arg1)

def i2psam_accept(arg1, silent):
    return _i2psam.i2psam_accept(arg1, silent)

def i2psam_connect(arg1, destination, silent):
    return _i2psam.i2psam_connect(arg1, destination, silent)

def i2psam_forward(arg1, host, port, silent):
    return _i2psam.i2psam_forward(arg1, host, port, silent)

def i2psam_namelookup(arg1, name):
    return _i2psam.i2psam_namelookup(arg1, name)

def i2psam_dest_generate(arg1):
    return _i2psam.i2psam_dest_generate(arg1)

def i2psam_stop_forwarding(arg1, host, port):
    return _i2psam.i2psam_stop_forwarding(arg1, host, port)

def i2psam_stop_forwarding_all(arg1):
    return _i2psam.i2psam_stop_forwarding_all(arg1)

def i2psam_get_my_destination(arg1):
    return _i2psam.i2psam_get_my_destination(arg1)

def i2psam_write(arg1, data, dlen):
    return _i2psam.i2psam_write(arg1, data, dlen)

def i2psam_read(arg1, dlen):
    return _i2psam.i2psam_read(arg1, dlen)

def i2psam_socket_close(arg1):
    return _i2psam.i2psam_socket_close(arg1)

def i2psam_socket_is_ok(arg1):
    return _i2psam.i2psam_socket_is_ok(arg1)

def i2psam_socket_free(arg1):
    return _i2psam.i2psam_socket_free(arg1)

def i2psam_destination_priv(arg1):
    return _i2psam.i2psam_destination_priv(arg1)

def i2psam_destination_pub(arg1):
    return _i2psam.i2psam_destination_pub(arg1)

def i2psam_destination_free(arg1):
    return _i2psam.i2psam_destination_free(arg1)


