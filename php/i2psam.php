<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('i2psam')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_i2psam.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('i2psam.so')) return;
    } else {
      if (!dl('i2psam.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class i2psam {
	const SAM_DEFAULT_ADDRESS = SAM_DEFAULT_ADDRESS;

	const SAM_DEFAULT_PORT = SAM_DEFAULT_PORT;

	const SAM_GENERATE_MY_DESTINATION = SAM_GENERATE_MY_DESTINATION;

	const SAM_MY_NAME = SAM_MY_NAME;

	const SAM_DEFAULT_I2P_OPTIONS = SAM_DEFAULT_I2P_OPTIONS;

	const SAM_SIGNATURE_TYPE = SAM_SIGNATURE_TYPE;

	const SAM_NAME_INBOUND_QUANTITY = SAM_NAME_INBOUND_QUANTITY;

	const SAM_DEFAULT_INBOUND_QUANTITY = SAM_DEFAULT_INBOUND_QUANTITY;

	const SAM_NAME_INBOUND_LENGTH = SAM_NAME_INBOUND_LENGTH;

	const SAM_DEFAULT_INBOUND_LENGTH = SAM_DEFAULT_INBOUND_LENGTH;

	const SAM_NAME_INBOUND_LENGTHVARIANCE = SAM_NAME_INBOUND_LENGTHVARIANCE;

	const SAM_DEFAULT_INBOUND_LENGTHVARIANCE = SAM_DEFAULT_INBOUND_LENGTHVARIANCE;

	const SAM_NAME_INBOUND_BACKUPQUANTITY = SAM_NAME_INBOUND_BACKUPQUANTITY;

	const SAM_DEFAULT_INBOUND_BACKUPQUANTITY = SAM_DEFAULT_INBOUND_BACKUPQUANTITY;

	const SAM_NAME_INBOUND_ALLOWZEROHOP = SAM_NAME_INBOUND_ALLOWZEROHOP;

	const SAM_NAME_INBOUND_IPRESTRICTION = SAM_NAME_INBOUND_IPRESTRICTION;

	const SAM_DEFAULT_INBOUND_IPRESTRICTION = SAM_DEFAULT_INBOUND_IPRESTRICTION;

	const SAM_NAME_OUTBOUND_QUANTITY = SAM_NAME_OUTBOUND_QUANTITY;

	const SAM_DEFAULT_OUTBOUND_QUANTITY = SAM_DEFAULT_OUTBOUND_QUANTITY;

	const SAM_NAME_OUTBOUND_LENGTH = SAM_NAME_OUTBOUND_LENGTH;

	const SAM_DEFAULT_OUTBOUND_LENGTH = SAM_DEFAULT_OUTBOUND_LENGTH;

	const SAM_NAME_OUTBOUND_LENGTHVARIANCE = SAM_NAME_OUTBOUND_LENGTHVARIANCE;

	const SAM_DEFAULT_OUTBOUND_LENGTHVARIANCE = SAM_DEFAULT_OUTBOUND_LENGTHVARIANCE;

	const SAM_NAME_OUTBOUND_BACKUPQUANTITY = SAM_NAME_OUTBOUND_BACKUPQUANTITY;

	const SAM_DEFAULT_OUTBOUND_BACKUPQUANTITY = SAM_DEFAULT_OUTBOUND_BACKUPQUANTITY;

	const SAM_NAME_OUTBOUND_ALLOWZEROHOP = SAM_NAME_OUTBOUND_ALLOWZEROHOP;

	const SAM_NAME_OUTBOUND_IPRESTRICTION = SAM_NAME_OUTBOUND_IPRESTRICTION;

	const SAM_DEFAULT_OUTBOUND_IPRESTRICTION = SAM_DEFAULT_OUTBOUND_IPRESTRICTION;

	const SAM_NAME_OUTBOUND_PRIORITY = SAM_NAME_OUTBOUND_PRIORITY;

	const SOCKET_ERROR = SOCKET_ERROR;

	const MAX_PATH = MAX_PATH;

	const MSG_NOSIGNAL = MSG_NOSIGNAL;

	const PRIO_MAX = PRIO_MAX;

	const THREAD_PRIORITY_LOWEST = THREAD_PRIORITY_LOWEST;

	const THREAD_PRIORITY_BELOW_NORMAL = THREAD_PRIORITY_BELOW_NORMAL;

	const THREAD_PRIORITY_NORMAL = THREAD_PRIORITY_NORMAL;

	const THREAD_PRIORITY_ABOVE_NORMAL = THREAD_PRIORITY_ABOVE_NORMAL;

	static function strnlen_int($start,$max_len) {
		return strnlen_int($start,$max_len);
	}

	static function i2psam_stream_session_new($arg1) {
		return i2psam_stream_session_new($arg1);
	}

	static function i2psam_stream_session_free($arg1) {
		i2psam_stream_session_free($arg1);
	}

	static function i2psam_get_samhost($arg1) {
		return i2psam_get_samhost($arg1);
	}

	static function i2psam_get_samport($arg1) {
		return i2psam_get_samport($arg1);
	}

	static function i2psam_get_nickname($arg1) {
		return i2psam_get_nickname($arg1);
	}

	static function i2psam_get_session_id($arg1) {
		return i2psam_get_session_id($arg1);
	}

	static function i2psam_get_sam_min_version($arg1) {
		return i2psam_get_sam_min_version($arg1);
	}

	static function i2psam_get_sam_max_version($arg1) {
		return i2psam_get_sam_max_version($arg1);
	}

	static function i2psam_get_sam_version($arg1) {
		return i2psam_get_sam_version($arg1);
	}

	static function i2psam_get_i2cp_options($arg1) {
		return i2psam_get_i2cp_options($arg1);
	}

	static function i2psam_is_sick($arg1) {
		return i2psam_is_sick($arg1);
	}

	static function i2psam_accept($arg1,$silent) {
		return i2psam_accept($arg1,$silent);
	}

	static function i2psam_connect($arg1,$destination,$silent) {
		return i2psam_connect($arg1,$destination,$silent);
	}

	static function i2psam_forward($arg1,$host,$port,$silent) {
		return i2psam_forward($arg1,$host,$port,$silent);
	}

	static function i2psam_namelookup($arg1,$name) {
		return i2psam_namelookup($arg1,$name);
	}

	static function i2psam_dest_generate($arg1) {
		return i2psam_dest_generate($arg1);
	}

	static function i2psam_stop_forwarding($arg1,$host,$port) {
		i2psam_stop_forwarding($arg1,$host,$port);
	}

	static function i2psam_stop_forwarding_all($arg1) {
		i2psam_stop_forwarding_all($arg1);
	}

	static function i2psam_get_my_destination($arg1) {
		return i2psam_get_my_destination($arg1);
	}

	static function i2psam_write($arg1,$data,$dlen) {
		i2psam_write($arg1,$data,$dlen);
	}

	static function i2psam_read($arg1,$dlen) {
		return i2psam_read($arg1,$dlen);
	}

	static function i2psam_socket_close($arg1) {
		i2psam_socket_close($arg1);
	}

	static function i2psam_socket_is_ok($arg1) {
		return i2psam_socket_is_ok($arg1);
	}

	static function i2psam_socket_free($arg1) {
		i2psam_socket_free($arg1);
	}

	static function i2psam_destination_priv($arg1) {
		return i2psam_destination_priv($arg1);
	}

	static function i2psam_destination_pub($arg1) {
		return i2psam_destination_pub($arg1);
	}

	static function i2psam_destination_free($arg1) {
		i2psam_destination_free($arg1);
	}
}

/* PHP Proxy Classes */
class i2psam_stream_settings {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'i2psam_stream_settings_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_i2psam_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'i2psam_stream_settings_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_i2psam_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('i2psam_stream_settings_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_i2psam_stream_settings') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_i2psam_stream_settings();
	}
}


?>
